{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Main/SelectBlock/index.js","components/Main/ContentBlock/index.js","components/Main/ModalBlock/index.js","components/Main/GalleryBlock/GalleryItem.js","components/Main/GalleryBlock/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","Footer","href","title","SelectBlock","props","handleDateChange","selectedDate","htmlFor","type","id","name","onChange","e","max","Date","now","toISOString","slice","ContentBlock","itemMediaType","itemTitle","width","height","src","itemUrl","frameBorder","allowFullScreen","itemExplanation","alt","ModalBlock","onClick","closeModal","GalleryItem","handleClickOnImage","useState","setItemUrl","setItemTitle","setItemMediaType","value","a","fetch","method","then","response","json","data","url","media_type","useEffect","fetchData","date","GalleryBlock","gallery","map","item","key","Main","window","localStorage","getItem","setSelectedDate","setItemExplanation","isModalOpen","setIsModalOpen","currentItemUrl","setCurrentItemUrl","currentItemTitle","setCurrentItemTitle","currentItemMediaType","setCurrentItemMediaType","parse","setDate","getDate","setGallery","explanation","catch","error","console","log","removeItem","setItem","onscroll","innerHeight","pageYOffset","document","body","offsetHeight","getMoreImages","iter","length","currentTarget","mediaType","event","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a2ee3b7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"header\">\r\n                <h1>Astronomy Picture of the Day</h1>\r\n            </header>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport { Header };","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <React.Fragment>\r\n            <footer className=\"footer\">\r\n                <p className=\"responsibilityNote\">Used data from <a href=\"https://api.nasa.gov/\" title=\"NASA APIs\">open sources</a> in accordance with <a href=\"https://www.nasa.gov/about/highlights/HP_Privacy.html\" title=\"Privacy Policy\">Privacy Policy</a> with studying purposes.</p>\r\n                <p className=\"copyrightNote\">All rights reserved. But that's not strictly, is it?</p>\r\n            </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport { Footer };","import React from 'react';\r\nimport './SelectBlock.css'\r\n\r\nfunction SelectBlock(props) {\r\n    const handleDateChange = props.handleDateChange;\r\n\r\n    return (\r\n        <div className=\"selectBlock\">\r\n            <h2 className=\"selectBlock_title\">Selected data: {props.selectedDate}</h2>\r\n            <form className=\"selectBlock_form\">\r\n                <label htmlFor=\"selectedData\">Please, select date to see image of day:</label>\r\n                <input type=\"date\" id=\"selectedData\" name=\"selectedData\" onChange={(e) => handleDateChange(e)} max={new Date(Date.now()).toISOString().slice(0, 10)}></input>\r\n            </form>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { SelectBlock };","import React from 'react';\r\nimport './ContentBlock.css'\r\n\r\nfunction ContentBlock(props) {\r\n    return (\r\n        <div className=\"contentBlock\">\r\n            {props.itemMediaType === 'video' ?\r\n                <React.Fragment>\r\n                    <h3 className=\"contentBlock_contentTitle\">{props.itemTitle}</h3>\r\n                    <iframe className=\"contentBlock_contentItem\" width=\"560\" height=\"315\" src={props.itemUrl} frameBorder=\"0\" title={props.itemTitle} allowFullScreen></iframe>\r\n                    <p className=\"contentBlock_contentExplanation\">{props.itemExplanation}</p>\r\n                </React.Fragment> :\r\n                <React.Fragment>\r\n                    <h3 className=\"contentBlock_contentTitle\">{props.itemTitle}</h3>\r\n                    <img className=\"contentBlock_contentItem\" src={props.itemUrl} alt={props.itemTitle}></img>\r\n                    <p className=\"contentBlock_contentExplanation\">{props.itemExplanation}</p>\r\n                </React.Fragment>\r\n            }\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { ContentBlock };","import React from 'react';\r\nimport './ModalBlock.css';\r\n\r\nfunction ModalBlock(props) {\r\n    return (\r\n        <div id=\"myModal\" className=\"modal\" onClick={(e) => props.closeModal(e)}>\r\n            {props.itemMediaType === 'video' ?\r\n                <iframe src={props.itemUrl} className=\"modal-content-image\" title={props.itemTitle}></iframe> :\r\n                <img src={props.itemUrl} className=\"modal-content-image\" alt={props.itemTitle}></img>\r\n            }\r\n            <p id=\"caption\">{props.itemTitle}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { ModalBlock };","import React, { useState, useEffect } from 'react';\r\nimport './GalleryItem.css';\r\n\r\nfunction GalleryItem(props) {\r\n    const handleClickOnImage = props.handleClickOnImage;\r\n    const [itemUrl, setItemUrl] = useState('');\r\n    const [itemTitle, setItemTitle] = useState('');\r\n    const [itemMediaType, setItemMediaType] = useState('');\r\n    \r\n    async function fetchData(value) {\r\n        await fetch(`https://api.nasa.gov/planetary/apod?api_key=PGmVPPPGZf5veqfPsVAsygTZ57NI6Tq0QUJiVlWv&date=${value}`, {\r\n            method: 'GET',\r\n        })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(data => {\r\n            setItemUrl(data.url);\r\n            setItemTitle(data.title);\r\n            setItemMediaType(data.media_type);\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        fetchData(props.date);\r\n    }, [props.date]);\r\n\r\n    if (itemUrl) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"galleryItemBlock\">\r\n                    {itemMediaType === 'video' ?\r\n                        <iframe src={itemUrl} className=\"galleryItem\" title={itemTitle} onClick={() => handleClickOnImage(itemUrl, itemTitle, itemMediaType)}></iframe> :\r\n                        <img src={itemUrl} className=\"galleryItem\" alt={itemTitle} onClick={() => handleClickOnImage(itemUrl, itemTitle, itemMediaType)} />\r\n                    }\r\n                </div>\r\n          </React.Fragment>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n} \r\n\r\nexport {GalleryItem};","import React from 'react';\r\nimport { GalleryItem } from './GalleryItem'\r\nimport './GalleryBlock.css';\r\n\r\nfunction GalleryBlock(props) {\r\n    const handleClickOnImage = props.handleClickOnImage;\r\n    const gallery = props.gallery;\r\n\r\n    return (\r\n        <div className=\"galleryBlockContainer\">\r\n            <h3>Check other Astronomy Picture of the Day</h3>\r\n            <div className=\"galleryWrapper\">\r\n                {gallery.map(item => {\r\n                    return <GalleryItem key={item} handleClickOnImage={handleClickOnImage} date={item} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { GalleryBlock };","import React, {useEffect, useState} from 'react';\r\nimport './Main.css';\r\nimport { SelectBlock } from './SelectBlock';\r\nimport { ContentBlock } from './ContentBlock';\r\nimport { ModalBlock } from './ModalBlock';\r\nimport { GalleryBlock } from './GalleryBlock';\r\n\r\nfunction Main() {\r\n    const [selectedDate, setSelectedDate] = useState(window.localStorage.getItem('selectedDate') || new Date(Date.now()).toISOString().slice(0, 10));\r\n    const [itemUrl, setItemUrl] = useState('');\r\n    const [itemTitle, setItemTitle] = useState('');\r\n    const [itemExplanation, setItemExplanation] = useState('');\r\n    const [itemMediaType, setItemMediaType] = useState('');\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n  \r\n    const [currentItemUrl, setCurrentItemUrl] = useState('');\r\n    const [currentItemTitle, setCurrentItemTitle] = useState('');\r\n    const [currentItemMediaType, setCurrentItemMediaType] = useState('');\r\n  \r\n    const [gallery, setGallery] = useState([\r\n        new Date(Date.now()).toISOString().slice(0, 10), \r\n        new Date(new Date(Date.parse(new Date(Date.now()).toISOString().slice(0, 10))).setDate(new Date(Date.parse(new Date(Date.now()).toISOString().slice(0, 10))).getDate() - 1)).toISOString().slice(0, 10), \r\n        new Date(new Date(Date.parse(new Date(Date.now()).toISOString().slice(0, 10))).setDate(new Date(Date.parse(new Date(Date.now()).toISOString().slice(0, 10))).getDate() - 2)).toISOString().slice(0, 10)\r\n    ]);\r\n  \r\n    useEffect(() => {\r\n        fetchData(selectedDate).catch(error => console.log(error));\r\n        selectedDate === new Date(Date.now()).toISOString().slice(0, 10) ? window.localStorage.removeItem('selectedDate') : window.localStorage.setItem('selectedDate', selectedDate);\r\n    }, []);\r\n  \r\n    async function fetchData(value) {\r\n        await fetch(`https://api.nasa.gov/planetary/apod?api_key=PGmVPPPGZf5veqfPsVAsygTZ57NI6Tq0QUJiVlWv&date=${value}`, {\r\n            method: 'GET',\r\n        })\r\n        .then(response => {\r\n            return response.json()\r\n            }\r\n        )\r\n        .then(\r\n            data => {\r\n                setItemUrl(data.url);\r\n                setItemTitle(data.title);\r\n                setItemExplanation(data.explanation);\r\n                setItemMediaType(data.media_type);\r\n            }\r\n        )\r\n    }\r\n  \r\n    window.onscroll = function() {\r\n        if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight) {\r\n            getMoreImages();\r\n        }\r\n    };\r\n  \r\n    const handleDateChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setSelectedDate(value);\r\n        value === new Date(Date.now()).toISOString().slice(0, 10) ? window.localStorage.removeItem('selectedDate') : window.localStorage.setItem('selectedDate', value);\r\n        fetchData(value);\r\n    };\r\n  \r\n    const handleClickOnImage = (url, title, mediaType) => {\r\n        setCurrentItemUrl(url);\r\n        setCurrentItemTitle(title);\r\n        setCurrentItemMediaType(mediaType);\r\n        setIsModalOpen(true);\r\n    }\r\n  \r\n    const closeModal = (event) => {\r\n        if (event.target.className !== 'modal-content') {\r\n            setIsModalOpen(false);\r\n        }\r\n    }\r\n    const getMoreImages = () => {\r\n        let iter = gallery.length;\r\n        do {\r\n            setGallery([...gallery, \r\n            new Date(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).setDate(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).getDate() - 1)).toISOString().slice(0, 10),\r\n            new Date(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).setDate(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).getDate() - 2)).toISOString().slice(0, 10),\r\n            new Date(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).setDate(new Date(Date.parse(new Date(gallery[gallery.length-1]).toISOString().slice(0, 10))).getDate() - 3)).toISOString().slice(0, 10)\r\n            ]);\r\n            iter += 1;\r\n        } while (iter % 3 !== 0);\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <SelectBlock selectedDate={selectedDate} handleDateChange={handleDateChange} />\r\n            <ContentBlock itemUrl={itemUrl} itemExplanation={itemExplanation} itemTitle={itemTitle} itemMediaType={itemMediaType} />\r\n            <GalleryBlock gallery={gallery} handleClickOnImage={handleClickOnImage} />\r\n            {isModalOpen ? <ModalBlock itemUrl={currentItemUrl} itemTitle={currentItemTitle} itemMediaType={currentItemMediaType} closeModal={closeModal} /> : null}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport { Main };","import React from 'react';\nimport { Header } from './components/Header/';\nimport { Footer } from './components/Footer/';\nimport { Main } from './components/Main';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Main />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}